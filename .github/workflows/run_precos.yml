# Nome do Workflow: Atualiza Preços de Catálogo
name: Atualizar Banco de Dados - Preços de Catálogo

# Gatilhos (Triggers)
on:
  # Permite acionar manualmente pela interface do GitHub
  workflow_dispatch:
    inputs:
      limite_itens:
        description: 'Limite de itens (vazio = TODOS)'
        required: false
        type: string
        default: ''
      lote_size:
        description: 'Tamanho do lote'
        required: false
        type: number
        default: 5
      use_warp:
        description: 'Usar Cloudflare WARP para trocar IP'
        required: false
        type: boolean
        default: true

  # Aciona automaticamente 3 vezes por dia (horário de Brasília)
  schedule:
    # 6h00 Brasília = 9h00 UTC
    - cron: '0 9 * * *'
    # 13h00 Brasília = 16h00 UTC
    - cron: '0 16 * * *'
    # 18h00 Brasília = 21h00 UTC
    - cron: '0 21 * * *'

jobs:
  # Nome do Job
  atualizar-precos:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    steps:
      - name: 1. Checkout do código do repositório
        uses: actions/checkout@v4

      - name: 2. Instalar Cloudflare WARP
        run: |
          echo "=========================================="
          echo "INSTALANDO CLOUDFLARE WARP"
          echo "=========================================="
          
          # Adicionar repositório Cloudflare
          curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list
          
          # Instalar WARP
          sudo apt-get update
          sudo apt-get install -y cloudflare-warp
          
          echo "WARP instalado com sucesso!"
          echo "=========================================="

      - name: 3. Verificar IP antes do WARP
        run: |
          echo "=========================================="
          echo "IP ORIGINAL DO GITHUB ACTIONS:"
          curl -s https://api.ipify.org
          echo ""
          echo "=========================================="

      - name: 4. Configurar ambiente Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 5. Instalar dependências Python
        run: pip install -r requirements.txt

      - name: 6. Criar pasta de logs
        run: mkdir -p logs

      - name: 7. Executar script de atualização de preços
        env:
          COCKROACHDB_CONN_STRING: ${{ secrets.COCKROACHDB_CONN_STRING }}
        run: python atualizar_precos_catalogo.py

      - name: 8. Desconectar WARP
        run: |
          echo "=========================================="
          echo "DESCONECTANDO WARP"
          echo "=========================================="
          echo "WARP desconectado"

      - name: 9. Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-precos-${{ github.run_number }}
          path: logs/*.log
          retention-days: 30
          if-no-files-found: warn

      - name: 10. Resumo da execução
        if: always()
        run: |
          echo "## 📊 Resumo da Sincronização" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tipo de Execução:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Horário (UTC):** $(date -u '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "- **Tamanho do Lote:** ${{ inputs.lote_size }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Cloudflare WARP:** ${{ inputs.use_warp }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Limite de Itens:** TODOS (execução agendada)" >> $GITHUB_STEP_SUMMARY
            echo "- **Tamanho do Lote:** 5" >> $GITHUB_STEP_SUMMARY
            echo "- **Cloudflare WARP:** ✅ Habilitado" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f logs/*.log ]; then
            echo "### 📝 Últimas 50 linhas do log:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Nenhum arquivo de log foi gerado." >> $GITHUB_STEP_SUMMARY
          fi
